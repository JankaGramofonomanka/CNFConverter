module FromBNFC.SkelQFBF where

-- Haskell module generated by the BNF converter

import FromBNFC.AbsQFBF
import FromBNFC.ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident string -> failure x
transFormula :: Formula -> Result
transFormula x = case x of
  Equ formula1 formula2 -> failure x
  RImpl formula1 formula2 -> failure x
  LImpl formula1 formula2 -> failure x
  And formula1 formula2 -> failure x
  Or formula1 formula2 -> failure x
  XOr formula1 formula2 -> failure x
  Not formula -> failure x
  Var ident -> failure x

